git --help ===> vemos todos los comandos

Para configurar lo primero ejecutamos estos comandos en la TERMINAL
git config --global user.name 'NOMBRE' ---> DEFINIMOS NUESTRO NAME
git config --global user.email 'EMAIL' --> DEFINIMOS EL MAIL
----------------------------------------------------------------------------------------------
Para empezar a trabajar recomendacion tener la carpeta vacia o usar el .gitignore.
Asi tenemos todo preparado para arrancar
Con un archivo .gitignore podemos elegir que archivo queremos que git ignore

ls =========> para ver los archivos que estamos trabajando en TERMINAL
ls -a =========>  para ver archivos ocultos
----------------------------------------------------------------------------------------------

git init =========> para cargar el repositorio --> la direccion donde estamos (master) => una rama

git config --list =========> listado de las configuraciones del proyecto git 
git config --global --list =========> listado de config. global

git status =========> el estado de nuestro repositorio: DONDE estamos, QUE nos falta hacer y QUE PODEMOS hacer.

git add <file> =========> agregamos el archivo al repositorio/git (pasa a tener una A en vez de una U)

git rm --cached <file> =======> para sacarlo


git commit -m 'Agregamos el archivo' prueba_git.py ====> commiteamos el archivo
git commit --amend --no-edit =====> USA EN LOCAL NO EN NUBE => Por si se nos paso un detalle y no queremos crear un commit nuevo, con amend 
agregamos el peque√±o cambio al ultimo commit que hicimos y con --no-edit dejamos el mensaje tal cual esta

------------------------------------------------------------------------------------------------

AL MODIFICAR EL PROGRAMA/archivo

con git add agregamos los cambios hechos
y con:
git restore --staged <file> =====> removemos los cambios (CONTROL + Z)

==============================================================

En SOURCE CONTROL-

Changes: Lo ultimo que modificamos, nuestra area de trabajo, lo que todavia no le hicimos add
Staged Changes: Lo que tenemos agregado hasta el momento 'el ultimo check point', lo que ya le hicimos add

git add . ====> guarda TODO lo que esta en Changes a Staged Changes 
-----------------------------------------------------------------------------------------

git log ===> Historial de los commit. QUIEN lo hizo, CUANDO, QUE y el codigo (hash) del cada commit.
git log --oneline ===> Historial resumido





































